{"uid":"362b3c2e5cf83bfe","name":"test_CredKart_Login_002","fullName":"testCases.test_Login.Test_CredKart_Login#test_CredKart_Login_002","historyId":"85b0aeb869b504d92d6240011f360467","time":{"start":1693548696172,"stop":1693548696172,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: cannot find msedge binary\nStacktrace:\nBacktrace:\n\tMicrosoft::Applications::Events::EventProperties::unpack [0x00007FF7F3834812+26370]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x00007FF7F3789E02+339106]\n\tOrdinal0 [0x00007FF7F3317821+620577]\n\tOrdinal0 [0x00007FF7F333DB21+776993]\n\tOrdinal0 [0x00007FF7F333A8E8+764136]\n\tOrdinal0 [0x00007FF7F3374B4F+1002319]\n\tOrdinal0 [0x00007FF7F336F263+979555]\n\tOrdinal0 [0x00007FF7F3346070+811120]\n\tOrdinal0 [0x00007FF7F3347668+816744]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7F35E32C8+128088]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7F35CCC1B+36267]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7F35CFC3C+48588]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF7F3427973+22115]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x00007FF7F379142B+369355]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x00007FF7F37962C4+389476]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x00007FF7F379641D+389821]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF7F37A0EA9+40761]\n\tBaseThreadInitThunk [0x00007FFED9CB1412+34]\n\tRtlUserThreadStart [0x00007FFEDA9F5504+52]","statusTrace":"browser = 'edge'\n\n    @pytest.fixture()\n    def setup(browser):\n        if browser == \"chrome\":\n            driver = webdriver.Chrome()\n            print(\"Launching Chrome Browser\")\n        elif browser == \"firefox\":\n            driver = webdriver.Firefox()\n            print(\"Launching Firefox Browser\")\n        elif browser == \"edge\":\n>           driver = webdriver.Edge()\n\ntestCases\\conftest.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:49: in __init__\n    super().__init__(\nC:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:54: in __init__\n    super().__init__(\nC:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:206: in __init__\n    self.start_session(capabilities)\nC:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:291: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nC:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000090D60941D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot find msedge binary\",\"stac...37A0EA9+40761]\\\\n\\\\tBaseThreadInitThunk [0x00007FFED9CB1412+34]\\\\n\\\\tRtlUserThreadStart [0x00007FFEDA9F5504+52]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot find msedge binary\nE       Stacktrace:\nE       Backtrace:\nE       \tMicrosoft::Applications::Events::EventProperties::unpack [0x00007FF7F3834812+26370]\nE       \tMicrosoft::Applications::Events::GUID_t::GUID_t [0x00007FF7F3789E02+339106]\nE       \tOrdinal0 [0x00007FF7F3317821+620577]\nE       \tOrdinal0 [0x00007FF7F333DB21+776993]\nE       \tOrdinal0 [0x00007FF7F333A8E8+764136]\nE       \tOrdinal0 [0x00007FF7F3374B4F+1002319]\nE       \tOrdinal0 [0x00007FF7F336F263+979555]\nE       \tOrdinal0 [0x00007FF7F3346070+811120]\nE       \tOrdinal0 [0x00007FF7F3347668+816744]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7F35E32C8+128088]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7F35CCC1B+36267]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7F35CFC3C+48588]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF7F3427973+22115]\nE       \tMicrosoft::Applications::Events::GUID_t::GUID_t [0x00007FF7F379142B+369355]\nE       \tMicrosoft::Applications::Events::GUID_t::GUID_t [0x00007FF7F37962C4+389476]\nE       \tMicrosoft::Applications::Events::GUID_t::GUID_t [0x00007FF7F379641D+389821]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF7F37A0EA9+40761]\nE       \tBaseThreadInitThunk [0x00007FFED9CB1412+34]\nE       \tRtlUserThreadStart [0x00007FFEDA9F5504+52]\n\nC:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1693548696182,"stop":1693548757659,"duration":61477},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: cannot find msedge binary\nStacktrace:\nBacktrace:\n\tMicrosoft::Applications::Events::EventProperties::unpack [0x00007FF7F3834812+26370]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x00007FF7F3789E02+339106]\n\tOrdinal0 [0x00007FF7F3317821+620577]\n\tOrdinal0 [0x00007FF7F333DB21+776993]\n\tOrdinal0 [0x00007FF7F333A8E8+764136]\n\tOrdinal0 [0x00007FF7F3374B4F+1002319]\n\tOrdinal0 [0x00007FF7F336F263+979555]\n\tOrdinal0 [0x00007FF7F3346070+811120]\n\tOrdinal0 [0x00007FF7F3347668+816744]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7F35E32C8+128088]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7F35CCC1B+36267]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7F35CFC3C+48588]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF7F3427973+22115]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x00007FF7F379142B+369355]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x00007FF7F37962C4+389476]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x00007FF7F379641D+389821]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF7F37A0EA9+40761]\n\tBaseThreadInitThunk [0x00007FFED9CB1412+34]\n\tRtlUserThreadStart [0x00007FFEDA9F5504+52]\n\n","statusTrace":"  File \"C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"G:\\pythonProject\\CredKart_Pytest_Project\\testCases\\conftest.py\", line 26, in setup\n    driver = webdriver.Edge()\n             ^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py\", line 49, in __init__\n    super().__init__(\n  File \"C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py\", line 54, in __init__\n    super().__init__(\n  File \"C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 206, in __init__\n    self.start_session(capabilities)\n  File \"C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 291, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 346, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true},{"name":"browser","time":{"start":1693548696182,"stop":1693548696182,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"test_Login"},{"name":"subSuite","value":"Test_CredKart_Login"},{"name":"host","value":"Inspiron"},{"name":"thread","value":"8460-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.test_Login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"362b3c2e5cf83bfe.json","parameterValues":[]}